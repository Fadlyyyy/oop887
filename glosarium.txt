karakteristik gaya procedural programming
- instruksi dilakukan langkah demi langkah
-  memecah program menjadi bagian-bagian kecil
- disebut prosedur, subroutine atau function
- linear / top-to-button
- fortran,ALGOL,COBOL,Pascal,C,PHP< javascript



kelebihan procedural programming

- To the point
- simplicity & kemudahan implementasi (untuk compiler dan interpreter)
- mudah ditelusuri
- membutuhkan lebih sedikit memory (dibandingkan dengan oop)

Object oriented programming
- menyusun semua kode program dan struktur data sebagai Object
- objek adalah unit dasar dari program
- objek menyimpan data dan perilaku
- objek bisa saling berinteraksi
- java, ruby,Python,C++, javascript,php5


kelebihan Object oriented programming
- Representasi dari dunia nyata
- Enkapsulasi & abstraksi data
- reusability 
- skalabilitas & ekstensibilitas
- kemudahan pengelolaan
- kolaborasi
- digunakan oleh framework



konsep oop pada php

basic 
- class & object
- property & method
- constructor
- object Type
- inheritance (pewarisan)
- visibility / access modifier
- setter & getter
- static method


advanced 
- abstract & interface
- interceptor
- object clonning
- callbacks & closures
- namespaces & autoloading
...



konsep class dan object

class 
- Blueprint / template untuk membuat instance dari object
- class mendefinisikan object
- menyimpan data dan perilaku yang disebut dengan property dan method

cara membuat class
- diawali dengan menuliskan keyword class, diikuti nama dan dibatasi dengan {} untuk kemudian
meyimpan property dan method

- aturan penamanaan class sama seperti variable

contoh class 
<?php 

class coba {

    public $al // property

    // method
    public function b () {

    }
}
?>

Object
- instance yang didefinisikan oleh class
- banyak object dapat dibuat menggunakan satu class
- object dibuat dengan menggunakan keyword new


contoh object


<?php 
class coba {



}

membuat object instance dari class
$a = new coba();
$b = new coba();

?>


property dan method

property 
- sesuatu yang merepresentasikan data / keadaan dari sebuah object
- variable yang ada didalam object (member variable)
- sama seperti variable didalam php, ditambah dengan visibility didepannya

method
- merepresentasikan perilaku dari sebuah object
- function yang ada didalam object
- sama seperti function didalam php, ditambah dengan  visibility didepannya

analogi seperti sebuah mobil

Property  (data)
- nama
- merk 
- warna 
- kecepatanMaksimal
- jumlahPenumpang

Method (Perilaku)
- tambahKecepatan
- kurangiKecepatan
- gantiTransmisi
- belokKiri
- belokKanan

namun ada beberapa mobil yang memiliki properti dan method yang khusus, selain method dan property yang ada dibatasi

contoh mobil sport merk lamborghini

Property 
- turbo (tipe boolean : true or false)





Method 
- jalankanTurbo



ilustrasi diatas bisa dianggap atau dikategorikan sebagai inheritance, dimana mobil sport adalah child class dari class mobil
dia mempunyai nama, tipe dan juga bisa menambah kecepatan.
namun dia mempunyai properti dan method khusus

constructor
merupakan sebuah method yang special / khusus yang ada didalam sebuah class
karena constructor ini adalah method yang otomatis dijalankan ketika 
sebuah class kita instansiasi / dibuat objectnya.
jika kita membuat object dengan menggunakan keyword new
secara otomatis pula ada sebuah method yang dijalankan, hal itu yang disebut dengan
constructor method


Inheritance 
- merupakan hieraki antar kelas (Parent & Child)
- child class, mewarisi semua properti dan method dari parent-nya (yang visible)
- Child class, memperluas (extends) fungsionalitas dari parent-nya


Overriding

Overriding adalah sebuah istilah dimana kita bisa membuat method dikelas child yang memiliki
nama yang sama deengan kelas parentnya atau istilah lainnya meethod yang kita buat menimpa method punya 
parent class


visibility (acces modifier)

- konsep yang digunakan untuk mengatur akses dari property dan method pada sebuah object
-ada 3 keyword visibility : public, protected dan private.
    -public , dapat digunakan dimana saja, bahkan diluar kelas.
    -protected, hanya dapat digunakan didalam sebuah kelas beserta turunannya.
    -private, hanya dapat digunakan didalam sebuah kelas tertentu saja.

why visibility??
- karena hanya memperlihatkan aspek dari class yang dibutuhkan oleh 'client'
- dapat menentukan kebutuhan yang jelas untuk object
- memberikan kendali pada kode untuk menghindari 'bug'


Setter dan getter (accessor method) mempunyai kaitan erat dengan visibility
karena setter dan getter ini untuk menghindari ketika kita membuat sebuah property 
dengan visibility public, karena kita sebaiknya tidak membiarkan bagian dari luar kelas
kita, bisa mengakses property secara langsung.
maka dari itu kita harus merubah visibilitynya menjadi protected atau private.
tergantung dari design.

setelah kita mengubah visibilitynya menjadi protected atau private,
artinya kita tidak lagi mempunyai akses secara langsung.
jika kita ingin mendapatkan isi dari sebuah property atau bahkan mensett 
nilai baru ke sebuah properti.

untuk itulah kita butuh sebuah method, method untuk bisa membaca atau melihat isi
dari properti ataupun mengubah isinya.

method tersebut kita sebut dengan setter dan getter.
method untuk sett dan untuk gett.

menggunakan setter dan getter memungkinkan kita untuk melakukan validasi.



